<?php

class DefaultController extends Controller {

    public function filters() {
        return array(
            'accessControl',
            'postOnly + delete',
        );
    }

    private $unitPrice = 45;
    public $defaultAction = 'user';
    public $pageTitle = "BRAC Inn Service";

    public function accessRules() {
        return array(
            array('allow',
                'actions' => array('index', 'access', 'tokens', 'confirm'),
                'users' => array('*'),
            ),
            array('allow',
                'actions' => array('user', 'create', 'transfer', 'cancel', 'balance', 'alltokens'),
                'users' => array('@'),
            ),
            array('allow',
                'actions' => array('admin'),
                'users' => array('@'),
            ),
            array('deny',
                'users' => array('*'),
            ),
        );
    }

    public function actionIndex() {
        $this->render('index');
    }

    public function actionAdmin() {

        $criteria = new CDbCriteria;
        $criteria->select = 'id, pin, count(pin) AS count';
        $criteria->group = 'pin';
        $criteria->condition = 'status=:s and date_time=:dt';
        $criteria->params = array(
            ':s' => 0,
            ':dt' => date('Y-m-d')
        );


        $dataProvider = new CActiveDataProvider('Transaction', array(
            'criteria' => $criteria,
            'pagination' => false
        ));

        $totalToken = Transaction::model()->count('status=:s and date_time=:dt', array(
            ':s' => 0,
            ':dt' => date('Y-m-d')
        ));

        $this->render('admin', array(
            'dataProvider' => $dataProvider,
            'totalToken' => $totalToken
        ));
    }

    public function actionUser() {
        $this->render('user');
    }

    # KIOSK Login

    public function actionAccess() {

        $token = $_GET['secret'];
        $pin = $_GET['pin'];

        if (md5("mydesk.ict.brac.net") == $token && !empty($pin)) {
            if ($this->getSetApplicationUser($pin)) {
                $identity = new UserIdentity($pin);
                $identity->authenticate();
                if ($identity->errorCode === UserIdentity::ERROR_NONE) {
                    Yii::app()->user->login($identity, 0);
                } else {
                    echo $identity->errorCode;
                }
            }
        } else {
            throw new CHttpException(503, 'Invalid access code.');
        }
    }

    # Send Valid Todays Tokens per PIN

    public function actionTokens() {

        $secret = $_GET['secret'];
        $pin = $_GET['pin'];

        if (md5("mydesk.ict.brac.net") == $secret && !empty($pin)) {
            $dateTime = new DateTime("now", new DateTimeZone('Asia/Dhaka'));
            $mysqldate = $dateTime->format("Y-m-d");
            $transactions = Transaction::model()->findAll(array('condition' => 'pin = :u AND date_time >= :d AND status = :s', 'params' => array(':u' => $pin, ':d' => $mysqldate, ':s' => 0)));

            $tokens = array();
            foreach ($transactions as $key => $value) {
                $token = array(
                    'serial' => $value->id,
                    'price' => '45',
                    'date' => $value->date_time,
                );
                array_push($tokens, $token);
            }
            echo CJSON::encode($tokens);
        } else {
            throw new CHttpException(503, 'Invalid access code.');
        }
    }

    public function actionAlltokens() {
        $pin = $_GET['pin'];

        $transactions = Transaction::model()->findAll(array('condition' => 'pin = :p AND status = :s', 'params' => array(':p' => $pin, ':s' => 0)));        

        echo CJSON::encode($transactions);
    }

    # TOKEN USED

    public function actionConfirm() {

        $secret = $_GET['secret'];
        $pin = $_GET['pin'];
        $serial = $_GET['serial'];

        if (md5("mydesk.ict.brac.net") == $secret && !empty($pin)) {

            $transaction = Transaction::model()->findByPk($serial);
            $transaction->status = "1";
            $transaction->update();
        }
    }

    public function actionCreate() {
        $t = new Transaction();
        $t->pin = $_POST['pin'];
        $t->date_time = $_POST['date_time'];
        $t->count = $_POST['count'];
        $t->status = $_POST['status'];

        $ua = UserAccount::model()->find(array('condition' => 'pin = :p', 'params' => array(':p' => $t->pin)));



        if ($ua->balance >= $this->unitPrice) {
            $balance = $ua->balance - $this->unitPrice;

            $ua->balance = $balance;

            $ua->update();
            if ($t->save()) {
                $msg = array(
                    'status' => 'success',
                    'balance' => $balance,
                    'serial' => $t->id
                );
                echo CJSON::encode($msg);
            }
        }
    }

    public function actionBalance() {
        $pin = $_GET['pin'];
        $balance = UserAccount::model()->find(array('condition' => 'pin = :p', 'params' => array(':p' => $pin)))->balance;

        $msg = array(
            'status' => 'success',
            'balance' => $balance
        );
        echo CJSON::encode($msg);
    }

    public function actionCancel() {

        $serial = $_REQUEST['serial'];

        $transaction = Transaction::model()->findByPk($serial);
        $pin = $transaction->pin;
        $transaction->delete();

        $ua = UserAccount::model()->find(array('condition' => 'pin=:p', 'params' => array(':p' => $pin)));
        $balance = $ua->balance;
        $balance+=$this->unitPrice;
        $ua->balance = $balance;
        $ua->update();


        $msg = array(
            'status' => 'success',
            'balance' => $balance
        );
        echo CJSON::encode($msg);
    }

    public function actionTransfer() {
        $from_pin = $_GET['from_pin'];
        $serial = $_GET['serial'];
        $to_pin = $_GET['to_pin'];
        $date_time = $_GET['date_time'];
        
        $transaction = Transaction::model()->findByPk($serial);        
        $transaction->delete();

        
        $ua = UserAccount::model()->find(array('condition' => 'pin=:p', 'params' => array(':p' => $from_pin)));
        $ua->balance +=$this->unitPrice;
        $ua->update();
        
        $t = new Transaction();
        $t->pin = $to_pin;
        $t->date_time = $date_time;
        $t->count = 1;
        $t->status = 0;
        
        $t->save();

        
        $ua = UserAccount::model()->find(array('condition' => 'pin=:p', 'params' => array(':p' => $to_pin)));
        $ua->balance -=$this->unitPrice;
        $ua->update();
        
        
    }

    private function getSetApplicationUser($user) {
        $find = User::model()->findByAttributes(array('username' => $user));
        if ($find) {
            return true;
        } else {
            $b = new User;
            $b->username = $user;

            $b->password = UserModule::encrypting("br@c#1231321");

            $hrdata = new HrdService;
            $model1 = $hrdata->getHrUser($user);

            $b->email = $model1[0]['Email'];

            if (empty($b->email)) {
                if ($b->username >= 146792 && $b->username <= 146798) {
                    $b->email = $b->username . '@bracsso.net';
                } else {
                    Yii::app()->user->logout();
                    throw new CHttpException(503, 'Your email id not updated in BRAC HRD System. Please contact with BRAC HRD.');
                }
            }
            $b->activkey = UserModule::encrypting(microtime() . $pass);
            $b->create_at = date('Y-m-d H:i:s');
            $b->lastvisit_at = date('Y-m-d H:i:s');
            $b->superuser = 0;
            $b->status = 1;
            $b->save();

            $c = new Profile;
            $c->user_id = $b->id;
            $c->lastname = $user;
            $c->firstname = $user;
            $c->save();
            return true;
        }
        return false;
    }

}
